Smudge is a state machine and uml diagram generation engine.

Smudge is both a language for describing state machines as well as a
compiler that interprets and validates those descriptions to generate
code and documentation for them. Example state machines can be found
in the examples directory. In particular, first.smudge has extensive
comments to describe what it's doing.

There's also a tutorial called tutorial.pdf.

-- Revision History --
v0.4: A major release, that corrects some long-standing Smudge issues.

      IMPORTANT: This includes a backwards-incompatible rename:
                    assert        -> SMUDGE_panic
                    printf_assert -> SMUDGE_panic_print

      Features: Added --strict flag which only allows functions for
      one event type.  The prototype for panic_print is now generated.  
      Added --namespace flag, with a default namespace of SMUDGE.
      Added --rename flag, which lets you rename symbols, e.g.:
        smudge --rename="@SMUDGE.@panic @assert"

      Architecture: Added a constraint solver type checker.  Added a
      fleshed out language definition with a section on the grammar
      and one on the type checker.  Removed the syntax for typed
      functions (the semantics of which were never implemented).

      Errata: A few minor parser bugs were fixed, including one that
      permitted junk at the end of a smudgle, and another that allowed
      empty event handler lists.

      Tickets:

      15: Typed function calls not implemented.
      22: Semantic pass to reject conflicting side effect return types
      23: Optional semantic pass to strictly reject conflicting side effects
      29: Problems with assert and special functions.
      39: States must have at least one event.

v0.3.1: This minor release improves certain error messages, and corrects
      handling of flags overriding output file locations.

      Tickets:

      25: Resolve conflict between QualifiedName [] and QualifiedName [""]
      48: Map.!: given key is not an element in the map
      51: Fix output path messiness.

v0.3: This release is much polished compared to 0.2, and suitable for
      even broader use.

      Tickets closed because they were in the roadmap:

      14: Any State + Any Event = Maybe Semantic Pass Failure.
      17: Exit functions are generated for terminal states.
      27: Better error messages
      32: Transient state @function prototypes
      33: _ [ _ -- ]
      34: Clean up release target.

      Tickets closed because we felt like it:

      18: _ event in _ state.
      31: Expose a way to get internal state?
      35: Separate object directories
      36: Option to disable no-transition events in dot output
      41: Debug code takes up global memory.
      50: --output-path=PATH

      Tickets deferred to 0.4:

      15: Typed function calls not implemented.

v0.2.1: Point release, fix minor niggles:

      Tickets:

      36: Option to disable no-transition events in dot output
      31: Expose a way to get internal state? (partial work done)

v0.2: Broader release for some limited use. Generates working C code
      for simple state machines.

v0.1: First release for early testing. Generates basic dot output for
      a single state machine. Configurable via command line options.
