Title: Problems with assert and special functions.

When there's an unhandled event, a call to "assert()" is
generated. First, I dislike the name of this function. Assertions
should assert that expressions are true and cause panics if they're
not. I'd much rather this function be called something like "panic()"
or, to prevent any namespace collisions, "SMUDGE_panic()" or something
like it.

Second, the generated smname_ext.h file does not include a prototype
for this function.

I assume this also applies to printf_assert.

I propose a new thing: Smudge-required symbols that are not
particularly associated with any state machine. These have the prefix
SMUDGE_ which we disallow as a state machine name. We can just dump
that list into the generated _ext.h file.

Update: There's code now that crams the assert symbol into the symbol
table so it gets generated. It works around this when --c-no-debug is
set, but this ticket should still get addressed.

Update 2:
These are the 7 possible solutions to this problem, and their issues:
* Predefined names without a namespace
    Risks of collisions
    Introduces symbols without consent
    User can't override
* Predefined names with a namespace
    Same as previous
* User defined names without a namespace
    Bad user design; forces new users to supply flags
* User defined names with a namespace
    Same as previous
* Use the C standard library directly.
    Too many dependencies
    Embedded systems w/o standard library
    Possible issues with future non-C backends
    User can't override
* User overrideable names without a namespace
    Granular control, but you don't get anything for free
* User overrideable names with a namespace
    Names for free, but no granular control


After discussing it, we opted for a blend of the last two, in two
parts:
* A default namespace, with a namespace flag to override
* Default names within that namespace, with a flag to replace any symbol

The flags are not backend-dependent.  The default namespace, as above is
SMUDGE.

The namespace flag is --namespace="NEW".
The symbol flag is --rename="SMUDGE_func new_name"

Internally, this is accomplished by having an symbol-alias table, where the
mappings for the renamed symbols are stored.
