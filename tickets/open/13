Title: Message Passing is Complicated.

First, to get rid of all recursion (see #4) we will need a way to hook
into the system's message passing mechanism. The current plan is to
provide hooks and wrap events up to send and receive, but the events
themselves may need to be deallocated by Smudge and not user-written
code while users will need to allocate them.

This is complicated by events whose side effects are to send messages
of particular types because we need to know that they're null
pointers.

Also: typed functions need to have their events' space allocated.

An example, for clarity:

struct SM_event_t
{
    event_identifier_t event;
    union
    {
        SM_event1_t *event1;
        SM_event2_t *event2;
        SM_event3_t *event3;
    } eventPtr;
};

SM_SendMessage(SM_event_t event); <- This function is called by Smudge
                                     and implemented by the user.

SM_HandleMessage(SM_event_t *event); <- This function is called by the
                                        user and the implementation is
                                        generated by Smudge.

SMUDGE_FreeEvent(void *pointer); <- This is going to have to be
                                    implemented by users too. It's for
                                    freeing things like event1 and
                                    event2, not the SM_event_t
                                    pointers.

SM_HandleMessage will have to free eventPtr. SM_SendMessage will have
to allocate space for the SM_event_t and it will have to be cleared by
the user-written function that calls SM_HandleMessage.
